/*
 * ReturnPane.java
 */

package videostore.gui;
import videostore.controller.ReturnUseCase;

/** The pane associated with the "Return" tab on the main card of the GUI
 *
 * @author Russell C. Bjork
 * 
 * MODIFIED BY: Adam Bartholomew and Steve Smith
 */
public class ReturnPane extends javax.swing.JPanel 
{
    /** Creates new form ReturnPane 
     */
    public ReturnPane() 
    {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        returnItemField = new javax.swing.JTextField();
        returnItemButton = new javax.swing.JButton();
        itemLabel = new javax.swing.JLabel();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        setLayout(new java.awt.GridBagLayout());

        returnItemField.setColumns(20);
        returnItemField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                returnItemFieldCaretUpdate(evt);
            }
        });
        returnItemField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnItemFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 240;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 5, 10);
        add(returnItemField, gridBagConstraints);

        returnItemButton.setText("Return Item");
        returnItemButton.setEnabled(false);
        returnItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnItemButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 10, 0);
        add(returnItemButton, gridBagConstraints);

        itemLabel.setLabelFor(returnItemField);
        itemLabel.setText("Item:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 5, 5);
        add(itemLabel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    /** The following code is executed each time the pane is shown
        It resets the item field to blank and requests focus for it */
    private void formComponentShown(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_formComponentShown
    {//GEN-HEADEREND:event_formComponentShown
        returnItemField.setText("");
        returnItemField.requestFocus();
    }//GEN-LAST:event_formComponentShown

    /** Enables the return item button just when the return item field is non-empty */
    private void returnItemFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_returnItemFieldCaretUpdate
        returnItemButton.setEnabled(returnItemField.getText().length() != 0);
    }//GEN-LAST:event_returnItemFieldCaretUpdate

    /** Makes pressing return in the item field equivalent to clicking the return item button */
    private void returnItemFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_returnItemFieldActionPerformed
    {//GEN-HEADEREND:event_returnItemFieldActionPerformed
        if (returnItemButton.isEnabled())
            returnItemButtonActionPerformed(evt);
    }//GEN-LAST:event_returnItemFieldActionPerformed

    /** Returns an item */
    private void returnItemButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_returnItemButtonActionPerformed
    {//GEN-HEADEREND:event_returnItemButtonActionPerformed
        String item = returnItemField.getText();
        try {
             ReturnUseCase.getInstance().perform(item);
        }
        catch(IllegalArgumentException e) {
            GUI.getInstance().showMessage(e.getMessage());
        }
        returnItemField.setText("");
        returnItemField.requestFocus();
    }//GEN-LAST:event_returnItemButtonActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel itemLabel;
    private javax.swing.JButton returnItemButton;
    private javax.swing.JTextField returnItemField;
    // End of variables declaration//GEN-END:variables
}
