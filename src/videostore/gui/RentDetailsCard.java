/*
 * RentDetailsCard.java
 */

package videostore.gui;

import videostore.controller.RentUseCase;

/** The card that manages the details of building a list of items to rent
 *  to a customer.  It is shown when a (valid) customer is entered in the Rent
 *  tab of the main card
 *
 * @author  Russell C. Bjork
 * 
 * MODIFIED BY: Adam Bartholomew and Steve Smith
 */
public class RentDetailsCard extends javax.swing.JPanel 
{
	
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        customerNameLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        itemField = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        clearAllButton = new javax.swing.JButton();
        addItemButton = new javax.swing.JButton();
        removeItemButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        itemsList = new javax.swing.JList();
        jPanel3 = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        collectLabel = new javax.swing.JLabel();
        rentItemsButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        customerNameLabel.setLabelFor(this);
        customerNameLabel.setText("Renting to:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(30, 30, 10, 30);
        add(customerNameLabel, gridBagConstraints);
        customerNameLabel.getAccessibleContext().setAccessibleName("The name of the customer we are renting to");
        customerNameLabel.getAccessibleContext().setAccessibleDescription("The name of the customer we are renting to");

        jLabel3.setLabelFor(itemField);
        jLabel3.setText("Item:");
        jPanel1.add(jLabel3);

        itemField.setColumns(20);
        itemField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemFieldActionPerformed(evt);
            }
        });
        itemField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                itemFieldCaretUpdate(evt);
            }
        });

        jPanel1.add(itemField);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 30, 10, 30);
        add(jPanel1, gridBagConstraints);

        clearAllButton.setText("Clear All Items");
        clearAllButton.setEnabled(false);
        clearAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllButtonActionPerformed(evt);
            }
        });

        jPanel2.add(clearAllButton);

        addItemButton.setText("Add Above Item");
        addItemButton.setEnabled(false);
        addItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemButtonActionPerformed(evt);
            }
        });

        jPanel2.add(addItemButton);

        removeItemButton.setText("Remove Item");
        removeItemButton.setEnabled(false);
        removeItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeItemButtonActionPerformed(evt);
            }
        });

        jPanel2.add(removeItemButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 30);
        add(jPanel2, gridBagConstraints);

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        itemsList.setModel(itemsListModel);
        itemsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                itemsListValueChanged(evt);
            }
        });

        jScrollPane1.setViewportView(itemsList);
        itemsList.getAccessibleContext().setAccessibleName("List of items to be rented");
        itemsList.getAccessibleContext().setAccessibleDescription("List of items to be rented");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 30, 10, 30);
        add(jScrollPane1, gridBagConstraints);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jPanel3.add(cancelButton);

        jPanel3.add(collectLabel);

        rentItemsButton.setText("Rent All Items");
        rentItemsButton.setEnabled(false);
        rentItemsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rentItemsButtonActionPerformed(evt);
            }
        });

        jPanel3.add(rentItemsButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(10, 30, 29, 30);
        add(jPanel3, gridBagConstraints);

        jLabel1.setLabelFor(itemsList);
        jLabel1.setText("Items to be rented");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        add(jLabel1, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    /** This method is called each time the card is shown.  It clears out
        various components, and then gives focus to the item field */
    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        customerNameLabel.setText("Renting to: " + 
                RentUseCase.getInstance().getCustomerName());
        itemField.setText("");
        itemsListModel.clear();
        collectLabel.setText("");
        clearAllButton.setEnabled(false);
        addItemButton.setEnabled(false);
        removeItemButton.setEnabled(false);
        rentItemsButton.setEnabled(false);
        itemField.requestFocus();
    }//GEN-LAST:event_formComponentShown

    /** Enable the add item button just when the item field is non-empty */
    private void itemFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_itemFieldCaretUpdate
        addItemButton.setEnabled(itemField.getText().length() != 0);
    }//GEN-LAST:event_itemFieldCaretUpdate

    /** Make pressing return in the item field equivalent to clicking the add item button */
    private void itemFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemFieldActionPerformed
        if (addItemButton.isEnabled())
            addItemButtonActionPerformed(evt);
    }//GEN-LAST:event_itemFieldActionPerformed

    /** Add a newly-entered item to the list of items to be rented */
    private void addItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemButtonActionPerformed
        try {
            String item = itemField.getText();
            String description = RentUseCase.getInstance().addItem(item);
            // The following will not be done if the controller throws an 
            // exception because the item entered is bad
            itemsListModel.addElement(description);
            updateAmountToCollect();
            clearAllButton.setEnabled(true);
            rentItemsButton.setEnabled(true);
        }
        catch(IllegalArgumentException e) {
            GUI.getInstance().showMessage(e.getMessage());
        }
        itemField.setText("");
        itemField.requestFocus();
    }//GEN-LAST:event_addItemButtonActionPerformed

    /** Enable the remove item button just when an item is selected in the list */
    private void itemsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_itemsListValueChanged
        int index = itemsList.getSelectedIndex();
        removeItemButton.setEnabled(index >= 0);
    }//GEN-LAST:event_itemsListValueChanged

    /** Remove an item from the list of items to be rented */
    private void removeItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeItemButtonActionPerformed
        int index = itemsList.getSelectedIndex();
        RentUseCase.getInstance().removeItem(index);
        itemsListModel.remove(index);
        if (itemsListModel.getSize() == 0) {
            clearAllButton.setEnabled(false);
            rentItemsButton.setEnabled(false);
            collectLabel.setText("");
        }
        else
            updateAmountToCollect();
        itemField.requestFocus();
    }//GEN-LAST:event_removeItemButtonActionPerformed

    /** Clear all items from the list of items to be rented */
    private void clearAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAllButtonActionPerformed
        RentUseCase.getInstance().clearItems();
        itemsListModel.clear();
        collectLabel.setText("");
        clearAllButton.setEnabled(false);
        rentItemsButton.setEnabled(false);
        itemField.requestFocus();
    }//GEN-LAST:event_clearAllButtonActionPerformed

    /** Rent all items in the list of items to be rented to the customer */
    private void rentItemsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rentItemsButtonActionPerformed
        RentUseCase.getInstance().rentItems();
        GUI.getInstance().goBack();
    }//GEN-LAST:event_rentItemsButtonActionPerformed

    /** Cancel renting to this customer */
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        RentUseCase.getInstance().cancel();
        GUI.getInstance().goBack();
    }//GEN-LAST:event_cancelButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addItemButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton clearAllButton;
    private javax.swing.JLabel collectLabel;
    private javax.swing.JLabel customerNameLabel;
    private javax.swing.JTextField itemField;
    private javax.swing.JList itemsList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton removeItemButton;
    private javax.swing.JButton rentItemsButton;
    // End of variables declaration//GEN-END:variables
    
    
    /** Constructor - to be used only in this package
     */
    RentDetailsCard() 
    {
        initComponents();
    }

    /** Update the total charges to collect
     */
    private void updateAmountToCollect() 
    {
        double amount = RentUseCase.getInstance().getTotalCharges();
        collectLabel.setText("Collect: " + 
            java.text.NumberFormat.getCurrencyInstance().format(amount));
    }
    
    // The model used for the displayed list of items.  The display includes 
    // the item id, title, and charge
    private javax.swing.DefaultListModel itemsListModel = 
                new javax.swing.DefaultListModel();
}
